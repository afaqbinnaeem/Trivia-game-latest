"use client";
// import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";
import { ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import logo from "@/assets/images/Logo.png";
import Image from "next/image";
import SearchComponent from "@/components/Search";
import { useEffect, useContext, useState } from "react";
import { useRouter } from "next/navigation";
import { LogInToken } from "@/context/usercontext";
import Loader from "@/Loader/Loader";
const inter = Inter({ subsets: ["latin"] });
import Link from "next/link";
import React from "react";
import { FaBars, FaTimes } from "react-icons/fa";
// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

const RootLayout: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const router = useRouter();
  const { token, setToken } = useContext(LogInToken) || {
    token: undefined,
    setToken: () => { },
  };
  const [loading, setLoading] = useState(true);
  useEffect(() => {
    const fetchToken = async () => {
      try {
        const storedToken = localStorage.getItem("cookieFallback");
        // @ts-ignore
        if (!storedToken) {
          router.push("/signUp");
        }
      } catch (error) {
        console.error("Error fetching token:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchToken();
    // @ts-ignore // Call the fetchToken function
  }, [router.pathname]); // Add router.pathname to the dependency array
  const [nav, setNav] = useState(false);
  const links = [
    {
      id: 1,
      link: "home",
    },
    // {
    //   id: 2,
    //   link: "about",
    // },
    // {
    //   id: 3,
    //   link: "portfolio",
    // },
    // {
    //   id: 4,
    //   link: "experience",
    // },
    // {
    //   id: 5,
    //   link: "contact",
    // },
  ];
  // useEffect(()=>{
  //   const token = localStorage.getItem('cookieFallback')
  //   console.log(token)
  //   if(!token){
  //     router.push('/signUp')
  //     return
  //   }else{
  //     router.push('/home')
  //   }

  // },[])

  return (
    <LogInToken.Provider value={{ token, setToken }}>
      <html lang="en">
        <body className={inter.className}>
          <>
            <nav className="bg-white p-4 sticky top-0 z-10">
              <div className="container mx-auto flex items-center justify-between">
                <a className="navbar-brand " href="#">
                  <Image src={logo} alt="" className="w-16 h-9" />
                </a>
                <div className="flex items-center relative">
              
                  <button
                    className=" focus:outline-none ml-8"
                    type="button"
                    aria-label="Toggle navigation"
                  >
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      width="27"
                      height="25"
                      viewBox="0 0 27 25"
                      fill="black"
                    >
                      <path d="M0 2H27" stroke="black" strokeWidth="4" />
                      <path d="M0 12.0166H27" stroke="black" strokeWidth="4" />
                      <path d="M0 22.0322H27" stroke="black" strokeWidth="4" />
                    </svg>
                  </button>
                </div>
              </div>
            </nav>
                {/* <h1 className="text-5xl font-signature ml-2"><a className="link-underline hover:transition ease-in-out delay-150 hover:underline hover:decoration-solid" href="">Logo</a></h1> */}
            {/* <div className="flex justify-between items-center w-full h-16 px-4 text-white bg-white sticky nav">
              <div>
                <h1 className="text-5xl font-signature ml-2">
                  <a className="navbar-brand " href="#">
                    <Image src={logo} alt="" className="w-16 h-9" />
                  </a>
                </h1>
              </div>

              <ul className="hidden md:flex ">
                {links.map(({ id, link }) => (
                  <li
                    key={id}
                    className="nav-links px-4 cursor-pointer capitalize font-medium text-gray-500 hover:scale-105 hover:text-white duration-200 link-underline"
                  >
                    <Link href={link}>{link}</Link>
                  </li>
                ))}
              </ul>

              <div
                onClick={() => setNav(!nav)}
                className="cursor-pointer pr-4 z-10 text-gray-500 md:hidden"
              >
                {nav ? <FaTimes className="text-white" size={30} /> : <FaBars className="text-black" size={30} />}
              </div>

              {nav && (
                <ul className="nav-links flex flex-col justify-center items-center absolute top-0 left-0 w-full bgPurple py-4">
                  {links.map(({ id, link }) => (
                    <li
                      key={id}
                      className="px-4 cursor-pointer players capitalize py-3 text-black"
                    >
                      <Link onClick={() => setNav(!nav)} href={link} className="">
                        {link}
                      </Link>
                    </li>
                  ))}
                  <button className="joinGamebtn">Logout</button>
                </ul>
              )}
            </div> */}
          </>
          {loading ? <Loader /> : children}
          <ToastContainer />
        </body>
      </html>
    </LogInToken.Provider>
  );
};

export default RootLayout;
